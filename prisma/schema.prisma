// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  projects      Project[]      @relation("OwnerProjects")
  members       Member[]
  taskAssignees TaskAssignee[]
  comments      Comment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}

model Project {
  id          String   @id @default(uuid())
  name        String
  projectKey  String   @unique @map("project_key")
  description String?
  ownerId     String
  owner       User     @relation("OwnerProjects", fields: [ownerId], references: [id])
  tasks       Task[]
  members     Member[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Member {
  id        String @id @default(uuid())
  userId    String
  projectId String @map("project_id")
  role      Role   @default(MEMBER)

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Task {
  id          String         @id @default(uuid())
  title       String
  description String?
  status      TaskStatus     @default(TODO)
  priority    TaskPriority   @default(MEDIUM)
  projectId   String         @map("project_id")
  project     Project        @relation(fields: [projectId], references: [id])
  assignees   TaskAssignee[]
  comments    Comment[]
  dueDate     DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
}

model TaskAssignee {
  id     String @id @default(uuid())
  taskId String @map("task_id")
  userId String @map("user_id")

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
